name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov

    - name: Run tests with coverage
      run: |
        python -m pytest tests/ -v --cov=backend --cov-report=xml --cov-report=term

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: matrix.python-version == '3.12'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Test demo scripts
      run: |
        echo "Testing demo scripts run without errors..."
        python demo_static_analyzer.py > /dev/null 2>&1 || echo "Static analyzer demo failed"
        python demo_dynamic_analyzer.py > /dev/null 2>&1 || echo "Dynamic analyzer demo failed"
        python demo_question_templates.py > /dev/null 2>&1 || echo "Template demo failed"
        python demo_question_generator.py > /dev/null 2>&1 || echo "Generator demo failed"
        echo "Demo scripts completed"

  lint:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort

    - name: Check code formatting with black
      run: |
        black --check --diff backend/ tests/ || echo "Code formatting issues found (non-blocking)"
      continue-on-error: true

    - name: Check import sorting with isort
      run: |
        isort --check-only --diff backend/ tests/ || echo "Import sorting issues found (non-blocking)"
      continue-on-error: true

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 backend/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 backend/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true

  security:
    name: Security Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Check dependencies for vulnerabilities
      run: |
        pip install -r requirements.txt
        safety check || echo "Dependency vulnerabilities found (non-blocking)"
      continue-on-error: true

    - name: Run bandit security linter
      run: |
        bandit -r backend/ -ll || echo "Security issues found (non-blocking)"
      continue-on-error: true

  build-status:
    name: Build Status
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    if: always()

    steps:
    - name: Check build status
      run: |
        if [ "${{ needs.test.result }}" == "failure" ]; then
          echo "❌ Tests failed!"
          exit 1
        fi
        echo "✅ All checks passed!"
